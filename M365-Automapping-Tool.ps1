#Requires -Version 5.1
<#
.SYNOPSIS
    Outil de Gestion Automapping Microsoft 365 - Version Fran√ßaise
    M365 Automapping Tool by ctrlaltnod.com

.DESCRIPTION
    Application PowerShell avec interface graphique pour g√©rer les permissions des bo√Ætes aux lettres partag√©es
    et d√©sactiver l'automapping dans Microsoft 365 Exchange Online.
    
    Fonctionnalit√©s principales :
    - Interface WPF moderne et intuitive
    - Connexion s√©curis√©e √† Microsoft 365 Exchange Online
    - Suppression de toutes les permissions pour les utilisateurs s√©lectionn√©s
    - D√©sactivation de l'automapping tout en pr√©servant l'acc√®s complet
    - Suppression compl√®te des permissions (Acc√®s complet, Envoyer en tant que, Envoyer de la part de)
    - Ouverture automatique du navigateur pour l'authentification par p√©riph√©rique
    - Gestion compl√®te des erreurs et journalisation d√©taill√©e

.AUTHOR
    ctrlaltnod.com - Emanuel DE ALMEIDA

.VERSION
    1.0 Version 
.NOTES
    Pr√©requis :
    1. PowerShell 5.1 ou version ult√©rieure
    2. Module ExchangeOnlineManagement : Install-Module -Name ExchangeOnlineManagement -Force
    3. Permissions Administrateur Exchange ou Administrateur Global dans Microsoft 365
    
    Premi√®re utilisation :
    Unblock-File -Path ".\M365-Automapping-Tool.ps1"
    
    D√©velopp√© par ctrlaltnod.com
#>

# Importation des assemblages requis pour WPF
Add-Type -AssemblyName PresentationCore
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName WindowsBase
Add-Type -AssemblyName System.Windows.Forms

# Variables globales pour la synchronisation et l'√©tat de l'application
$Global:SyncHash = [hashtable]::Synchronized(@{})  # Hashtable synchronis√©e pour les √©l√©ments UI
$Global:Connected = $false                          # √âtat de la connexion Exchange Online
$Global:DeviceCode = $null                         # Code d'authentification de p√©riph√©rique

# D√©finition XAML pour l'interface graphique - Enti√®rement en fran√ßais
$Script:XAML = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="M365 Automapping Tool by ctrlaltnod.com - Version Fran√ßaise" 
        Height="700" 
        Width="1000"
        WindowStartupLocation="CenterScreen"
        ResizeMode="CanMinimize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- En-t√™te avec branding ctrlaltnod.com -->
        <Border Grid.Row="0" Background="#2E86AB" Padding="15">
            <StackPanel>
                <TextBlock Text="M365 Automapping Tool" 
                          FontSize="20" 
                          FontWeight="Bold" 
                          Foreground="White" 
                          HorizontalAlignment="Center"/>
                <TextBlock Text="by ctrlaltnod.com" 
                          FontSize="14" 
                          FontStyle="Italic"
                          Foreground="LightBlue" 
                          HorizontalAlignment="Center"
                          Margin="0,2,0,0"/>
            </StackPanel>
        </Border>
        
        <!-- Instructions pour le code d'authentification -->
        <GroupBox Grid.Row="1" Header="üì± Instructions Code d'Authentification" Margin="10" Background="#FFE4B5">
            <StackPanel>
                <TextBlock Text="Quand vous cliquez sur Connexion, regardez la FEN√äTRE CONSOLE PowerShell pour le code d'authentification !" 
                          FontWeight="Bold" 
                          Foreground="Red"
                          TextWrapping="Wrap"
                          Margin="5"/>
                <TextBlock Text="Exemple : 'Pour vous connecter, utilisez un navigateur web pour ouvrir https://microsoft.com/devicelogin et entrez le code ABC123XYZ'" 
                          FontFamily="Courier New"
                          Background="LightGray"
                          Padding="5"
                          TextWrapping="Wrap"
                          Margin="5"/>
            </StackPanel>
        </GroupBox>
        
        <!-- Section de connexion Microsoft 365 -->
        <GroupBox Grid.Row="2" Header="üîê Connexion Microsoft 365" Margin="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <Label Grid.Column="0" Content="Email Administrateur :" VerticalAlignment="Center" FontWeight="Bold"/>
                <TextBox Grid.Column="1" Name="txtAdminEmail" Margin="5" Height="25" VerticalAlignment="Center"/>
                <Button Grid.Column="2" Name="btnConnect" Content="Se Connecter" Width="100" Height="30" Margin="5" Background="#4CAF50" Foreground="White"/>
                <Button Grid.Column="3" Name="btnDisconnect" Content="Se D√©connecter" Width="110" Height="30" Margin="5" Background="#f44336" Foreground="White" IsEnabled="False"/>
                <Button Grid.Column="4" Name="btnTestModule" Content="Tester Module" Width="100" Height="30" Margin="5" Background="#FF9800" Foreground="White"/>
            </Grid>
        </GroupBox>
        
        <!-- Statut de la connexion -->
        <Grid Grid.Row="3" Margin="10,0,10,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" Content="Statut de Connexion :" FontWeight="Bold"/>
            <Label Grid.Column="1" Name="lblConnectionStatus" Content="Non Connect√©" Foreground="Red" FontWeight="Bold"/>
        </Grid>
        
        <!-- S√©lection utilisateur -->
        <GroupBox Grid.Row="4" Header="üë§ S√©lectionner l'Utilisateur" Margin="10,0,10,10" Name="grpUserSelection" IsEnabled="False">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <Label Grid.Column="0" Content="Choisir Utilisateur :" VerticalAlignment="Center" FontWeight="Bold"/>
                <ComboBox Grid.Column="1" Name="cmbUsers" Margin="5" Height="25" IsEditable="True"/>
                <Button Grid.Column="2" Name="btnRefreshUsers" Content="Actualiser Utilisateurs" Width="140" Height="30" Margin="5" Background="#2196F3" Foreground="White"/>
            </Grid>
        </GroupBox>
        
        <!-- S√©lection bo√Æte aux lettres partag√©e -->
        <GroupBox Grid.Row="5" Header="üìÆ S√©lectionner la Bo√Æte Partag√©e" Margin="10,0,10,10" Name="grpMailboxSelection" IsEnabled="False">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <Label Grid.Column="0" Content="Bo√Æte Partag√©e :" VerticalAlignment="Center" FontWeight="Bold"/>
                <ComboBox Grid.Column="1" Name="cmbSharedMailboxes" Margin="5" Height="25" IsEditable="True"/>
                <Button Grid.Column="2" Name="btnRefreshMailboxes" Content="Actualiser Bo√Ætes" Width="120" Height="30" Margin="5" Background="#2196F3" Foreground="White"/>
            </Grid>
        </GroupBox>
        
        <!-- Boutons d'actions -->
        <GroupBox Grid.Row="6" Header="‚ö° Actions" Margin="10,0,10,10" Name="grpActions" IsEnabled="False">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <Button Name="btnCheckPermissions" Content="V√©rifier Permissions" Width="150" Height="40" Margin="5" Background="#9C27B0" Foreground="White"/>
                <Button Name="btnDisableAutomapping" Content="D√©sactiver Automapping" Width="160" Height="40" Margin="5" Background="#FF6B35" Foreground="White"/>
                <Button Name="btnRemoveAllPermissions" Content="Supprimer TOUTES Permissions" Width="180" Height="40" Margin="5" Background="#DC143C" Foreground="White"/>
            </StackPanel>
        </GroupBox>
        
        <!-- Journal d'activit√© -->
        <GroupBox Grid.Row="7" Header="üìã Journal d'Activit√©" Margin="10">
            <ScrollViewer VerticalScrollBarVisibility="Auto">
                <TextBox Name="txtLog" 
                         IsReadOnly="True" 
                         FontFamily="Courier New"
                         FontSize="10"
                         Background="#F5F5F5"
                         BorderThickness="0"
                         TextWrapping="Wrap"/>
            </ScrollViewer>
        </GroupBox>
        
        <!-- Barre de progression -->
        <ProgressBar Grid.Row="8" Name="progressBar" Height="20" Margin="10" Visibility="Collapsed"/>
        
        <!-- Barre de statut -->
        <StatusBar Grid.Row="9">
            <StatusBarItem>
                <TextBlock Name="txtStatus" Text="Pr√™t - Regardez la console pour le code d'authentification lors de la connexion" FontWeight="Bold"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
"@

# Fonction pour √©crire dans le journal d'activit√© avec horodatage
function Write-Log {
    param(
        [string]$Message,   # Message √† enregistrer
        [string]$Level = "Info"  # Niveau : Info, Warning, Error
    )
    
    # Cr√©ation de l'horodatage au format fran√ßais
    $timestamp = Get-Date -Format "dd/MM/yyyy HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    
    try {
        # Mise √† jour thread-safe du journal dans l'interface
        $Global:SyncHash.txtLog.Dispatcher.Invoke([action]{
            $Global:SyncHash.txtLog.AppendText("$logEntry`r`n")
            $Global:SyncHash.txtLog.ScrollToEnd()
        }, "Normal")
    } catch {
        # Fallback vers la console si l'interface n'est pas disponible
        Write-Host $logEntry -ForegroundColor $(if($Level -eq "Error"){"Red"}elseif($Level -eq "Warning"){"Yellow"}else{"White"})
    }
}

# Fonction pour mettre √† jour la barre de statut
function Update-Status {
    param([string]$Status)  # Nouveau statut √† afficher
    
    try {
        # Mise √† jour thread-safe de la barre de statut
        $Global:SyncHash.txtStatus.Dispatcher.Invoke([action]{
            $Global:SyncHash.txtStatus.Text = $Status
        }, "Normal")
    } catch {
        # Fallback vers la console
        Write-Host "STATUT: $Status" -ForegroundColor Green
    }
}

# Fonction pour contr√¥ler la barre de progression
function Set-ProgressBar {
    param(
        [bool]$Show,        # Afficher ou masquer la barre
        [int]$Value = 0     # Valeur de progression (0-100)
    )
    
    try {
        # Mise √† jour thread-safe de la barre de progression
        $Global:SyncHash.progressBar.Dispatcher.Invoke([action]{
            if ($Show) {
                $Global:SyncHash.progressBar.Visibility = "Visible"
                $Global:SyncHash.progressBar.Value = $Value
            } else {
                $Global:SyncHash.progressBar.Visibility = "Collapsed"
            }
        }, "Normal")
    } catch {
        # Fallback vers la console
        Write-Host "PROGRESSION: $Value%" -ForegroundColor Yellow
    }
}

# Fonction pour tester la disponibilit√© du module Exchange Online
function Test-ExchangeModule {
    Write-Log "Test du module ExchangeOnlineManagement..." "Info"
    Update-Status "Test du module en cours..."
    
    try {
        # V√©rification de l'installation du module
        $module = Get-Module -ListAvailable -Name ExchangeOnlineManagement
        if (-not $module) {
            $message = @"
Le module ExchangeOnlineManagement n'est PAS install√©.

Commande d'installation :
Install-Module -Name ExchangeOnlineManagement -Force

Puis red√©marrez cette application.
"@
            Write-Log "Module ExchangeOnlineManagement non trouv√©" "Error"
            [System.Windows.MessageBox]::Show($message, "Module Manquant", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
            return $false
        }
        
        # Tentative d'importation du module
        Import-Module ExchangeOnlineManagement -Force -ErrorAction Stop
        $moduleVersion = (Get-Module ExchangeOnlineManagement).Version.ToString()
        
        $message = "Module ExchangeOnlineManagement v$moduleVersion est pr√™t !"
        Write-Log $message "Info"
        Update-Status "Test du module r√©ussi"
        
        [System.Windows.MessageBox]::Show($message, "Test Module R√©ussi", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        return $true
        
    } catch {
        $message = "√âchec du test du module : $($_.Exception.Message)"
        Write-Log $message "Error"
        Update-Status "√âchec du test du module"
        [System.Windows.MessageBox]::Show($message, "√âchec Test Module", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
        return $false
    }
}

# Fonction principale pour se connecter √† Exchange Online
function Connect-ExchangeOnline365 {
    param([string]$UserPrincipalName)  # Email de l'administrateur
    
    # Validation de l'email administrateur
    if ([string]::IsNullOrWhiteSpace($UserPrincipalName)) {
        [System.Windows.MessageBox]::Show("Veuillez saisir une adresse email administrateur.", "Information Manquante", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return $false
    }
    
    Write-Log "D√©marrage de la connexion √† Exchange Online en tant que : $UserPrincipalName" "Info"
    Update-Status "Connexion √† Exchange Online..."
    Set-ProgressBar -Show $true -Value 20
    
    # Affichage des instructions d'authentification
    $instructionMessage = @"
AUTHENTIFICATION PAR CODE D'APPAREIL

Instructions importantes :

1. Apr√®s avoir cliqu√© sur OK, le code d'appareil appara√Ætra dans la FEN√äTRE CONSOLE PowerShell (derri√®re cette interface)

2. Recherchez un message comme :
   "Pour vous connecter, utilisez un navigateur web pour ouvrir la page https://microsoft.com/devicelogin et entrez le code XXXXXXXX pour vous authentifier."

3. Copiez le code depuis la console
4. Ouvrez un navigateur vers https://microsoft.com/devicelogin
5. Entrez le code et terminez l'authentification

Le code d'appareil ressemblera √† : ABC123XYZ

Cliquez sur OK pour commencer l'authentification...
"@
    
    [System.Windows.MessageBox]::Show($instructionMessage, "Instructions d'Authentification", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
    
    try {
        # Importation du module Exchange Online
        Import-Module ExchangeOnlineManagement -Force
        Set-ProgressBar -Show $true -Value 40
        
        Write-Log "Lancement de l'authentification par appareil..." "Info"
        Update-Status "Authentification par appareil en cours..."
        
        # Instructions dans la console
        Write-Host ""
        Write-Host "================================================" -ForegroundColor Yellow
        Write-Host "D√âBUT DE L'AUTHENTIFICATION PAR APPAREIL" -ForegroundColor Yellow
        Write-Host "Recherchez le code d'appareil ci-dessous..." -ForegroundColor Yellow
        Write-Host "================================================" -ForegroundColor Yellow
        Write-Host ""
        
        # Connexion avec authentification par appareil
        # Le code d'appareil appara√Ætra automatiquement dans la console
        Connect-ExchangeOnline -UserPrincipalName $UserPrincipalName -Device -ShowBanner:$false
        
        # Si nous arrivons ici, l'authentification a r√©ussi
        Set-ProgressBar -Show $true -Value 90
        
        # Test de la connexion
        $testResult = Get-EXOMailbox -ResultSize 1 -ErrorAction Stop
        
        # Mise √† jour de l'interface pour le succ√®s
        $Global:SyncHash.lblConnectionStatus.Content = "Connect√© en tant que $UserPrincipalName"
        $Global:SyncHash.lblConnectionStatus.Foreground = "Green"
        $Global:SyncHash.btnConnect.IsEnabled = $false
        $Global:SyncHash.btnDisconnect.IsEnabled = $true
        $Global:SyncHash.grpUserSelection.IsEnabled = $true
        $Global:SyncHash.grpMailboxSelection.IsEnabled = $true
        $Global:SyncHash.grpActions.IsEnabled = $true
        
        Set-ProgressBar -Show $true -Value 100
        Start-Sleep -Seconds 1
        Set-ProgressBar -Show $false
        
        # Mise √† jour des variables globales
        $Global:Connected = $true
        Write-Log "Connexion r√©ussie √† Exchange Online !" "Info"
        Update-Status "Connect√© √† Exchange Online"
        
        # Message de succ√®s dans la console
        Write-Host ""
        Write-Host "================================================" -ForegroundColor Green
        Write-Host "AUTHENTIFICATION R√âUSSIE !" -ForegroundColor Green
        Write-Host "Connect√© √† Exchange Online" -ForegroundColor Green
        Write-Host "================================================" -ForegroundColor Green
        Write-Host ""
        
        [System.Windows.MessageBox]::Show("Connexion r√©ussie √† Exchange Online !", "Connexion R√©ussie", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        return $true
        
    } catch {
        # Gestion des erreurs de connexion
        $errorMessage = $_.Exception.Message
        Write-Log "√âchec de la connexion : $errorMessage" "Error"
        Set-ProgressBar -Show $false
        Update-Status "√âchec de la connexion"
        
        # Message d'erreur dans la console
        Write-Host ""
        Write-Host "================================================" -ForegroundColor Red
        Write-Host "√âCHEC DE L'AUTHENTIFICATION" -ForegroundColor Red
        Write-Host "Erreur : $errorMessage" -ForegroundColor Red
        Write-Host "================================================" -ForegroundColor Red
        Write-Host ""
        
        [System.Windows.MessageBox]::Show("√âchec de la connexion : $errorMessage", "Erreur de Connexion", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
        return $false
    }
}

# Fonction pour se d√©connecter d'Exchange Online
function Disconnect-ExchangeOnline365 {
    try {
        # D√©connexion si connect√©
        if ($Global:Connected) {
            Disconnect-ExchangeOnline -Confirm:$false
            Write-Log "D√©connect√© d'Exchange Online" "Info"
        }
        
        # R√©initialisation de l'interface utilisateur
        $Global:SyncHash.lblConnectionStatus.Content = "Non Connect√©"
        $Global:SyncHash.lblConnectionStatus.Foreground = "Red"
        $Global:SyncHash.btnConnect.IsEnabled = $true
        $Global:SyncHash.btnDisconnect.IsEnabled = $false
        $Global:SyncHash.grpUserSelection.IsEnabled = $false
        $Global:SyncHash.grpMailboxSelection.IsEnabled = $false
        $Global:SyncHash.grpActions.IsEnabled = $false
        $Global:SyncHash.cmbUsers.Items.Clear()
        $Global:SyncHash.cmbSharedMailboxes.Items.Clear()
        
        # R√©initialisation des variables globales
        $Global:Connected = $false
        Update-Status "D√©connect√©"
        
    } catch {
        Write-Log "Erreur lors de la d√©connexion : $($_.Exception.Message)" "Error"
    }
}

# Fonction pour actualiser la liste des utilisateurs
function Refresh-Users {
    # V√©rification de la connexion
    if (-not $Global:Connected) {
        [System.Windows.MessageBox]::Show("Veuillez vous connecter √† Exchange Online d'abord.", "Non Connect√©", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    
    Write-Log "Chargement des bo√Ætes aux lettres utilisateur..." "Info"
    Update-Status "Chargement des utilisateurs..."
    Set-ProgressBar -Show $true -Value 30
    
    try {
        # R√©cup√©ration des bo√Ætes aux lettres utilisateur (limit√© √† 50 pour les performances)
        $users = Get-EXOMailbox -RecipientTypeDetails UserMailbox -ResultSize 50 | 
                 Select-Object DisplayName, PrimarySmtpAddress | 
                 Sort-Object DisplayName
        
        Set-ProgressBar -Show $true -Value 80
        
        # Remplissage de la liste d√©roulante des utilisateurs
        $Global:SyncHash.cmbUsers.Items.Clear()
        foreach ($user in $users) {
            $displayText = "$($user.DisplayName) ($($user.PrimarySmtpAddress))"
            $Global:SyncHash.cmbUsers.Items.Add($displayText)
        }
        
        Write-Log "Charg√© $($users.Count) bo√Ætes aux lettres utilisateur" "Info"
        Set-ProgressBar -Show $false
        Update-Status "Utilisateurs charg√©s avec succ√®s"
        
    } catch {
        Write-Log "Erreur lors du chargement des utilisateurs : $($_.Exception.Message)" "Error"
        Set-ProgressBar -Show $false
        Update-Status "Erreur lors du chargement des utilisateurs"
    }
}

# Fonction pour actualiser la liste des bo√Ætes aux lettres partag√©es
function Refresh-SharedMailboxes {
    # V√©rification de la connexion
    if (-not $Global:Connected) {
        [System.Windows.MessageBox]::Show("Veuillez vous connecter √† Exchange Online d'abord.", "Non Connect√©", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    
    Write-Log "Chargement des bo√Ætes aux lettres partag√©es..." "Info"
    Update-Status "Chargement des bo√Ætes partag√©es..."
    Set-ProgressBar -Show $true -Value 30
    
    try {
        # R√©cup√©ration des bo√Ætes aux lettres partag√©es (limit√© √† 50 pour les performances)
        $sharedMailboxes = Get-EXOMailbox -RecipientTypeDetails SharedMailbox -ResultSize 50 | 
                          Select-Object DisplayName, PrimarySmtpAddress | 
                          Sort-Object DisplayName
        
        Set-ProgressBar -Show $true -Value 80
        
        # Remplissage de la liste d√©roulante des bo√Ætes partag√©es
        $Global:SyncHash.cmbSharedMailboxes.Items.Clear()
        foreach ($mailbox in $sharedMailboxes) {
            $displayText = "$($mailbox.DisplayName) ($($mailbox.PrimarySmtpAddress))"
            $Global:SyncHash.cmbSharedMailboxes.Items.Add($displayText)
        }
        
        Write-Log "Charg√© $($sharedMailboxes.Count) bo√Ætes aux lettres partag√©es" "Info"
        Set-ProgressBar -Show $false
        Update-Status "Bo√Ætes partag√©es charg√©es avec succ√®s"
        
    } catch {
        Write-Log "Erreur lors du chargement des bo√Ætes partag√©es : $($_.Exception.Message)" "Error"
        Set-ProgressBar -Show $false
        Update-Status "Erreur lors du chargement des bo√Ætes partag√©es"
    }
}

# Fonction utilitaire pour extraire l'adresse email d'une s√©lection
function Get-EmailFromSelection {
    param([string]$Selection)  # Texte s√©lectionn√© au format "Nom (email@domain.com)"
    
    # Expression r√©guli√®re pour extraire l'email entre parenth√®ses
    if ($Selection -match '\(([^)]+)\)$') {
        return $matches[1]
    }
    return $Selection
}

# Fonction pour v√©rifier les permissions actuelles
function Check-Permissions {
    # R√©cup√©ration des s√©lections utilisateur
    $selectedUser = $Global:SyncHash.cmbUsers.SelectedItem
    $selectedMailbox = $Global:SyncHash.cmbSharedMailboxes.SelectedItem
    
    # Validation des s√©lections
    if (-not $selectedUser -or -not $selectedMailbox) {
        [System.Windows.MessageBox]::Show("Veuillez s√©lectionner √† la fois un utilisateur et une bo√Æte aux lettres partag√©e.", "S√©lection Requise", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    
    # Extraction des adresses email
    $userEmail = Get-EmailFromSelection -Selection $selectedUser
    $mailboxEmail = Get-EmailFromSelection -Selection $selectedMailbox
    
    Write-Log "V√©rification des permissions pour $userEmail sur $mailboxEmail" "Info"
    Update-Status "V√©rification des permissions..."
    Set-ProgressBar -Show $true -Value 50
    
    try {
        # V√©rification des permissions de bo√Æte aux lettres (Acc√®s complet)
        $permissions = Get-EXOMailboxPermission -Identity $mailboxEmail -User $userEmail -ErrorAction SilentlyContinue
        
        if ($permissions) {
            Write-Log "Permissions de bo√Æte aux lettres actuelles trouv√©es :" "Info"
            foreach ($perm in $permissions) {
                Write-Log "  - Droits d'acc√®s : $($perm.AccessRights -join ', ')" "Info"
                Write-Log "  - H√©rit√© : $($perm.IsInherited)" "Info"
                Write-Log "  - Refus√© : $($perm.Deny)" "Info"
            }
        } else {
            Write-Log "Aucune permission explicite de bo√Æte aux lettres trouv√©e" "Info"
        }
        
        # V√©rification des permissions "Envoyer en tant que"
        $recipientPerms = Get-EXORecipientPermission -Identity $mailboxEmail -Trustee $userEmail -ErrorAction SilentlyContinue
        if ($recipientPerms) {
            Write-Log "Permissions 'Envoyer en tant que' trouv√©es :" "Info"
            foreach ($perm in $recipientPerms) {
                Write-Log "  - Droits 'Envoyer en tant que' : $($perm.AccessRights -join ', ')" "Info"
            }
        } else {
            Write-Log "Aucune permission 'Envoyer en tant que' trouv√©e" "Info"
        }
        
        # V√©rification des permissions "Envoyer de la part de"
        $mailbox = Get-EXOMailbox -Identity $mailboxEmail -Properties GrantSendOnBehalfTo -ErrorAction SilentlyContinue
        if ($mailbox.GrantSendOnBehalfTo -and $mailbox.GrantSendOnBehalfTo -contains $userEmail) {
            Write-Log "Permissions 'Envoyer de la part de' trouv√©es pour cet utilisateur" "Info"
        } else {
            Write-Log "Aucune permission 'Envoyer de la part de' trouv√©e" "Info"
        }
        
        Set-ProgressBar -Show $false
        Update-Status "V√©rification des permissions termin√©e"
        
        [System.Windows.MessageBox]::Show("V√©rification des permissions termin√©e. Consultez le journal d'activit√© pour les d√©tails.", "V√©rification Termin√©e", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        
    } catch {
        Write-Log "Erreur lors de la v√©rification des permissions : $($_.Exception.Message)" "Error"
        Set-ProgressBar -Show $false
        Update-Status "Erreur lors de la v√©rification des permissions"
        [System.Windows.MessageBox]::Show("Erreur lors de la v√©rification des permissions : $($_.Exception.Message)", "Erreur", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
    }
}

# Fonction principale pour d√©sactiver l'automapping (fonctionnalit√© principale)
function Disable-Automapping {
    # R√©cup√©ration des s√©lections utilisateur
    $selectedUser = $Global:SyncHash.cmbUsers.SelectedItem
    $selectedMailbox = $Global:SyncHash.cmbSharedMailboxes.SelectedItem
    
    # Validation des s√©lections
    if (-not $selectedUser -or -not $selectedMailbox) {
        [System.Windows.MessageBox]::Show("Veuillez s√©lectionner √† la fois un utilisateur et une bo√Æte aux lettres partag√©e.", "S√©lection Requise", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    
    # Extraction des adresses email
    $userEmail = Get-EmailFromSelection -Selection $selectedUser
    $mailboxEmail = Get-EmailFromSelection -Selection $selectedMailbox
    
    # Dialogue de confirmation avec explication d√©taill√©e
    $confirmMessage = @"
Ceci va d√©sactiver l'automapping pour :

Utilisateur : $userEmail
Bo√Æte Partag√©e : $mailboxEmail

Processus :
1. Supprimer les permissions d'Acc√®s Complet existantes
2. Re-ajouter les permissions d'Acc√®s Complet avec AutoMapping d√©sactiv√©

L'utilisateur conservera l'acc√®s √† la bo√Æte aux lettres mais celle-ci n'appara√Ætra plus automatiquement dans Outlook.

Voulez-vous continuer ?
"@
    
    $result = [System.Windows.MessageBox]::Show($confirmMessage, "Confirmer D√©sactivation Automapping", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)
    
    if ($result -ne [System.Windows.MessageBoxResult]::Yes) {
        Write-Log "Op√©ration de d√©sactivation automapping annul√©e par l'utilisateur" "Info"
        return
    }
    
    Write-Log "D√©sactivation de l'automapping pour $userEmail sur $mailboxEmail" "Info"
    Update-Status "D√©sactivation de l'automapping..."
    Set-ProgressBar -Show $true -Value 25
    
    try {
        # √âtape 1 : Suppression des permissions d'acc√®s complet existantes
        Write-Log "√âtape 1 : Suppression des permissions d'Acc√®s Complet existantes..." "Info"
        Remove-MailboxPermission -Identity $mailboxEmail -User $userEmail -AccessRights FullAccess -Confirm:$false -ErrorAction SilentlyContinue
        Write-Log "Permissions d'Acc√®s Complet existantes supprim√©es (s'il y en avait)" "Info"
        
        Set-ProgressBar -Show $true -Value 75
        
        # √âtape 2 : Re-ajout avec automapping d√©sactiv√©
        Write-Log "√âtape 2 : Re-ajout des permissions d'Acc√®s Complet avec AutoMapping d√©sactiv√©..." "Info"
        Add-MailboxPermission -Identity $mailboxEmail -User $userEmail -AccessRights FullAccess -AutoMapping:$false -Confirm:$false
        Write-Log "Permissions d'Acc√®s Complet ajout√©es avec AutoMapping d√©sactiv√©" "Info"
        
        Set-ProgressBar -Show $true -Value 100
        Start-Sleep -Seconds 1
        Set-ProgressBar -Show $false
        
        Write-Log "Automapping d√©sactiv√© avec succ√®s !" "Info"
        Update-Status "Automapping d√©sactiv√© avec succ√®s"
        
        # Message de succ√®s d√©taill√©
        $successMessage = @"
Automapping d√©sactiv√© avec succ√®s !

Utilisateur : $userEmail
Bo√Æte Partag√©e : $mailboxEmail

Notes importantes :
- L'utilisateur a toujours l'Acc√®s Complet √† la bo√Æte aux lettres
- La bo√Æte aux lettres n'appara√Ætra plus automatiquement dans Outlook
- L'utilisateur doit red√©marrer Outlook pour voir les changements
- L'utilisateur peut ajouter manuellement la bo√Æte aux lettres si n√©cessaire

Op√©ration termin√©e avec succ√®s.
"@
        
        [System.Windows.MessageBox]::Show($successMessage, "Automapping D√©sactiv√©", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        
    } catch {
        Write-Log "Erreur lors de la d√©sactivation de l'automapping : $($_.Exception.Message)" "Error"
        Set-ProgressBar -Show $false
        Update-Status "Erreur lors de la d√©sactivation de l'automapping"
        [System.Windows.MessageBox]::Show("Erreur lors de la d√©sactivation de l'automapping : $($_.Exception.Message)", "Erreur", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
    }
}

# Fonction pour supprimer toutes les permissions
function Remove-AllPermissions {
    # R√©cup√©ration des s√©lections utilisateur
    $selectedUser = $Global:SyncHash.cmbUsers.SelectedItem
    $selectedMailbox = $Global:SyncHash.cmbSharedMailboxes.SelectedItem
    
    # Validation des s√©lections
    if (-not $selectedUser -or -not $selectedMailbox) {
        [System.Windows.MessageBox]::Show("Veuillez s√©lectionner √† la fois un utilisateur et une bo√Æte aux lettres partag√©e.", "S√©lection Requise", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
    
    # Extraction des adresses email
    $userEmail = Get-EmailFromSelection -Selection $selectedUser
    $mailboxEmail = Get-EmailFromSelection -Selection $selectedMailbox
    
    # Dialogue de confirmation avec avertissement fort
    $confirmMessage = @"
ATTENTION : Ceci va supprimer TOUTES les permissions pour :

Utilisateur : $userEmail
Bo√Æte Partag√©e : $mailboxEmail

Cela inclut :
‚úó Permissions d'Acc√®s Complet
‚úó Permissions 'Envoyer en tant que'
‚úó Permissions 'Envoyer de la part de'

Apr√®s cette op√©ration :
- L'utilisateur perdra TOUT acc√®s √† la bo√Æte aux lettres
- L'utilisateur ne pourra plus ouvrir ou acc√©der √† la bo√Æte aux lettres
- L'utilisateur ne pourra plus envoyer d'emails en tant que ou de la part de cette bo√Æte

Cette action ne peut pas √™tre facilement annul√©e.

√ätes-vous absolument s√ªr de vouloir continuer ?
"@
    
    $result = [System.Windows.MessageBox]::Show($confirmMessage, "Confirmer Suppression TOUTES Permissions", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Warning)
    
    if ($result -ne [System.Windows.MessageBoxResult]::Yes) {
        Write-Log "Op√©ration de suppression de toutes les permissions annul√©e par l'utilisateur" "Info"
        return
    }
    
    Write-Log "Suppression de TOUTES les permissions pour $userEmail sur $mailboxEmail" "Info"
    Update-Status "Suppression de toutes les permissions..."
    Set-ProgressBar -Show $true -Value 33
    
    try {
        # Suppression des permissions d'Acc√®s Complet
        Write-Log "Suppression des permissions d'Acc√®s Complet..." "Info"
        Remove-MailboxPermission -Identity $mailboxEmail -User $userEmail -AccessRights FullAccess -Confirm:$false -ErrorAction SilentlyContinue
        Write-Log "Permissions d'Acc√®s Complet supprim√©es" "Info"
        
        Set-ProgressBar -Show $true -Value 66
        
        # Suppression des permissions "Envoyer en tant que"
        Write-Log "Suppression des permissions 'Envoyer en tant que'..." "Info"
        Remove-RecipientPermission -Identity $mailboxEmail -Trustee $userEmail -AccessRights SendAs -Confirm:$false -ErrorAction SilentlyContinue
        Write-Log "Permissions 'Envoyer en tant que' supprim√©es" "Info"
        
        Set-ProgressBar -Show $true -Value 85
        
        # Suppression des permissions "Envoyer de la part de"
        Write-Log "Suppression des permissions 'Envoyer de la part de'..." "Info"
        try {
            $mailbox = Get-EXOMailbox -Identity $mailboxEmail -Properties GrantSendOnBehalfTo
            if ($mailbox.GrantSendOnBehalfTo -and $mailbox.GrantSendOnBehalfTo -contains $userEmail) {
                $newGrantList = $mailbox.GrantSendOnBehalfTo | Where-Object { $_ -ne $userEmail }
                Set-Mailbox -Identity $mailboxEmail -GrantSendOnBehalfTo $newGrantList -ErrorAction SilentlyContinue
                Write-Log "Permissions 'Envoyer de la part de' supprim√©es" "Info"
            } else {
                Write-Log "Aucune permission 'Envoyer de la part de' trouv√©e √† supprimer" "Info"
            }
        } catch {
            Write-Log "Suppression des permissions 'Envoyer de la part de' : $($_.Exception.Message)" "Warning"
        }
        
        Set-ProgressBar -Show $true -Value 100
        Start-Sleep -Seconds 1
        Set-ProgressBar -Show $false
        
        Write-Log "TOUTES les permissions supprim√©es avec succ√®s !" "Info"
        Update-Status "Toutes les permissions supprim√©es"
        
        # Message de succ√®s
        $successMessage = @"
Toutes les permissions ont √©t√© supprim√©es avec succ√®s !

Utilisateur : $userEmail
Bo√Æte Partag√©e : $mailboxEmail

Permissions supprim√©es :
‚úì Permissions d'Acc√®s Complet
‚úì Permissions 'Envoyer en tant que'
‚úì Permissions 'Envoyer de la part de'

L'utilisateur n'a maintenant AUCUN acc√®s √† cette bo√Æte aux lettres partag√©e.

Op√©ration termin√©e avec succ√®s.
"@
        
        [System.Windows.MessageBox]::Show($successMessage, "Toutes les Permissions Supprim√©es", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        
    } catch {
        Write-Log "Erreur lors de la suppression des permissions : $($_.Exception.Message)" "Error"
        Set-ProgressBar -Show $false
        Update-Status "Erreur lors de la suppression des permissions"
        [System.Windows.MessageBox]::Show("Erreur lors de la suppression des permissions : $($_.Exception.Message)", "Erreur", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
    }
}

# Fonction principale pour cr√©er et afficher l'interface graphique
function Show-AutomappingManagerGUI {
    try {
        # Analyse du XAML et cr√©ation de la fen√™tre
        [xml]$xamlXml = $Script:XAML
        $reader = New-Object System.Xml.XmlNodeReader $xamlXml
        $Global:SyncHash.Window = [Windows.Markup.XamlReader]::Load($reader)
        
        # R√©cup√©ration de tous les √©l√©ments UI nomm√©s
        $xamlXml.SelectNodes("//*[@Name]") | ForEach-Object {
            $Global:SyncHash.($_.Name) = $Global:SyncHash.Window.FindName($_.Name)
        }
        
        Write-Log "Application d√©marr√©e - M365 Automapping Tool by ctrlaltnod.com" "Info"
        Update-Status "Pr√™t - Regardez la console pour le code d'authentification lors de la connexion"
        
        # Liaison des gestionnaires d'√©v√©nements avec syntaxe appropri√©e
        
        # Bouton Test Module
        $Global:SyncHash.btnTestModule.Add_Click({
            Test-ExchangeModule
        })
        
        # Bouton Se Connecter
        $Global:SyncHash.btnConnect.Add_Click({
            $adminEmail = $Global:SyncHash.txtAdminEmail.Text.Trim()
            if ([string]::IsNullOrWhiteSpace($adminEmail)) {
                [System.Windows.MessageBox]::Show("Veuillez saisir une adresse email administrateur.", "Information Manquante", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
                return
            }
            
            # D√©sactivation du bouton pendant la tentative de connexion
            $Global:SyncHash.btnConnect.IsEnabled = $false
            try {
                Connect-ExchangeOnline365 -UserPrincipalName $adminEmail
            } finally {
                # R√©activation du bouton si la connexion a √©chou√©
                if (-not $Global:Connected) {
                    $Global:SyncHash.btnConnect.IsEnabled = $true
                }
            }
        })
        
        # Bouton Se D√©connecter
        $Global:SyncHash.btnDisconnect.Add_Click({
            Disconnect-ExchangeOnline365
        })
        
        # Bouton Actualiser Utilisateurs
        $Global:SyncHash.btnRefreshUsers.Add_Click({
            Refresh-Users
        })
        
        # Bouton Actualiser Bo√Ætes aux Lettres
        $Global:SyncHash.btnRefreshMailboxes.Add_Click({
            Refresh-SharedMailboxes
        })
        
        # Bouton V√©rifier Permissions
        $Global:SyncHash.btnCheckPermissions.Add_Click({
            Check-Permissions
        })
        
        # Bouton D√©sactiver Automapping (fonctionnalit√© principale)
        $Global:SyncHash.btnDisableAutomapping.Add_Click({
            Disable-Automapping
        })
        
        # Bouton Supprimer Toutes les Permissions
        $Global:SyncHash.btnRemoveAllPermissions.Add_Click({
            Remove-AllPermissions
        })
        
        # √âv√©nement de fermeture de fen√™tre
        $Global:SyncHash.Window.Add_Closing({
            Write-Log "Fermeture de l'application" "Info"
            if ($Global:Connected) {
                Write-Log "Nettoyage de la connexion Exchange Online..." "Info"
                try {
                    Disconnect-ExchangeOnline365
                } catch {
                    Write-Log "Erreur lors du nettoyage : $($_.Exception.Message)" "Warning"
                }
            }
        })
        
        # Affichage des informations syst√®me
        $psVersion = $PSVersionTable.PSVersion.ToString()
        $osVersion = [System.Environment]::OSVersion.VersionString
        Write-Log "=== M365 Automapping Tool by ctrlaltnod.com ===" "Info"
        Write-Log "Informations Syst√®me :" "Info"
        Write-Log "Version PowerShell : $psVersion" "Info"
        Write-Log "Syst√®me d'Exploitation : $osVersion" "Info"
        Write-Log "Application pr√™te √† l'utilisation" "Info"
        
        # Affichage de la fen√™tre
        $null = $Global:SyncHash.Window.ShowDialog()
        
    } catch {
        # Gestion des erreurs critiques de cr√©ation de l'interface
        $errorMessage = "Erreur critique lors de la cr√©ation de l'interface : $($_.Exception.Message)"
        Write-Host $errorMessage -ForegroundColor Red
        Write-Host "Trace de la pile : $($_.ScriptStackTrace)" -ForegroundColor Red
        [System.Windows.MessageBox]::Show($errorMessage, "Erreur Critique Interface", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
    }
}

# Fonction pour v√©rifier les pr√©requis syst√®me
function Test-Prerequisites {
    Write-Host "V√©rification des pr√©requis syst√®me..." -ForegroundColor Yellow
    $allGood = $true
    
    # V√©rification de la version PowerShell
    if ($PSVersionTable.PSVersion.Major -lt 5) {
        Write-Host "‚ùå ERREUR : PowerShell 5.1 ou version ult√©rieure requis (trouv√© $($PSVersionTable.PSVersion))" -ForegroundColor Red
        $allGood = $false
    } else {
        Write-Host "‚úÖ Version PowerShell : $($PSVersionTable.PSVersion)" -ForegroundColor Green
    }
    
    # V√©rification si ex√©cut√© en tant qu'administrateur (recommand√© mais pas obligatoire)
    try {
        $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
        $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
        $isAdmin = $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        
        if ($isAdmin) {
            Write-Host "‚úÖ Ex√©cut√© en tant qu'Administrateur" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Avertissement : Non ex√©cut√© en tant qu'Administrateur (certaines fonctionnalit√©s peuvent ne pas fonctionner de mani√®re optimale)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Impossible de d√©terminer le statut administrateur" -ForegroundColor Yellow
    }
    
    # V√©rification de la politique d'ex√©cution
    $executionPolicy = Get-ExecutionPolicy
    if ($executionPolicy -eq "Restricted") {
        Write-Host "‚ùå ERREUR : La Politique d'Ex√©cution est Restreinte. Ex√©cutez : Set-ExecutionPolicy RemoteSigned -Scope CurrentUser" -ForegroundColor Red
        $allGood = $false
    } else {
        Write-Host "‚úÖ Politique d'Ex√©cution : $executionPolicy" -ForegroundColor Green
    }
    
    Write-Host ""
    if ($allGood) {
        Write-Host "‚úÖ Tous les pr√©requis sont satisfaits !" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Veuillez r√©soudre les probl√®mes ci-dessus avant de continuer." -ForegroundColor Red
    }
    
    return $allGood
}

# Fonction principale d'ex√©cution
function Main {
    # Affichage de la banni√®re avec branding ctrlaltnod.com
    Write-Host ""
    Write-Host "================================================================" -ForegroundColor Cyan
    Write-Host "   M365 Automapping Tool by ctrlaltnod.com" -ForegroundColor Cyan
    Write-Host "   Solution compl√®te pour g√©rer l'automapping des bo√Ætes partag√©es" -ForegroundColor Cyan
    Write-Host "   Version Fran√ßaise avec commentaires d√©taill√©s" -ForegroundColor Cyan
    Write-Host "================================================================" -ForegroundColor Cyan
    Write-Host ""
    
    # V√©rification si le fichier script est bloqu√© (avertissement de s√©curit√©)
    $scriptPath = $MyInvocation.MyCommand.Path
    if ($scriptPath) {
        try {
            $zones = Get-Content -Path "$scriptPath" -Stream Zone.Identifier -ErrorAction SilentlyContinue
            if ($zones) {
                Write-Host "üîí AVIS DE S√âCURIT√â : Ce script est bloqu√© par la s√©curit√© Windows." -ForegroundColor Yellow
                Write-Host "   Pour supprimer l'avertissement de s√©curit√©, ex√©cutez cette commande :" -ForegroundColor Yellow
                Write-Host "   Unblock-File -Path '$scriptPath'" -ForegroundColor White
                Write-Host ""
                $response = Read-Host "Continuer quand m√™me ? (o/n)"
                if ($response -ne 'o' -and $response -ne 'O') {
                    Write-Host "Fermeture..." -ForegroundColor Yellow
                    return
                }
                Write-Host ""
            }
        } catch {
            # La v√©rification Zone.Identifier a √©chou√©, continuer quand m√™me
        }
    }
    
    # V√©rification des pr√©requis
    if (-not (Test-Prerequisites)) {
        Write-Host ""
        Write-Host "Veuillez r√©soudre les probl√®mes de pr√©requis et r√©essayer." -ForegroundColor Red
        Read-Host "Appuyez sur Entr√©e pour quitter"
        return
    }
    
    Write-Host ""
    Write-Host "IMPORTANT : Le code d'authentification appara√Ætra dans cette fen√™tre console !" -ForegroundColor Yellow
    Write-Host "Recherchez un message comme : 'Pour vous connecter, utilisez un navigateur web...'" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "D√©marrage de l'interface graphique..." -ForegroundColor Green
    Write-Host ""
    
    # Lancement de l'interface graphique
    try {
        Show-AutomappingManagerGUI
    } catch {
        Write-Host "√âchec du d√©marrage de l'application : $($_.Exception.Message)" -ForegroundColor Red
        Read-Host "Appuyez sur Entr√©e pour quitter"
    }
}

# Ex√©cution de la fonction principale
Main